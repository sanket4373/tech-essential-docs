{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This website is a space for me to document different technologies and tools that i have learned over the years in a systematic way","title":"Welcome"},{"location":"algorithms/binary_search/","text":"BINARY SEARCH \u00b6 In Binary search algorithm its input is a sorted list of elements. If an element you\u2019re looking for is in that list, binary search returns the position where it\u2019s located. Otherwise, binary search returns null. In general, for any list of n, binary search will take log2 n steps to run in the worst case, whereas simple search will take n steps. examples: Suppose you\u2019re searching for a person in the phone book (what an old-fashioned sentence!). Their name starts with K. You could start at the beginning and keep flipping pages until you get to the Ks. But you\u2019re more likely to start at a page in the middle, because you know the Ks are going to be near the middle of the phone book. Or suppose you\u2019re searching for a word in a dictionary, and it starts with O. Again, you\u2019ll start near the middle. Now suppose you log on to Facebook. When you do, Facebook has to verify that you have an account on the site. So, it needs to search for your username in its database. Suppose your username is karlmageddon. Facebook could start from the As and search for your name\u2014but it makes more sense for it to begin somewhere in the middle. This is a search problem. And all these cases use the same algorithm to solve the problem: binary search.","title":"Binary search"},{"location":"algorithms/binary_search/#binary-search","text":"In Binary search algorithm its input is a sorted list of elements. If an element you\u2019re looking for is in that list, binary search returns the position where it\u2019s located. Otherwise, binary search returns null. In general, for any list of n, binary search will take log2 n steps to run in the worst case, whereas simple search will take n steps. examples: Suppose you\u2019re searching for a person in the phone book (what an old-fashioned sentence!). Their name starts with K. You could start at the beginning and keep flipping pages until you get to the Ks. But you\u2019re more likely to start at a page in the middle, because you know the Ks are going to be near the middle of the phone book. Or suppose you\u2019re searching for a word in a dictionary, and it starts with O. Again, you\u2019ll start near the middle. Now suppose you log on to Facebook. When you do, Facebook has to verify that you have an account on the site. So, it needs to search for your username in its database. Suppose your username is karlmageddon. Facebook could start from the As and search for your name\u2014but it makes more sense for it to begin somewhere in the middle. This is a search problem. And all these cases use the same algorithm to solve the problem: binary search.","title":"BINARY SEARCH"},{"location":"databases/sql/introduction/","text":"Introduction \u00b6 SQL, Structured Query Language, is a programming language designed to manage data stored in relational databases. SQL operates through simple, declarative statements. This keeps data accurate and secure, and helps maintain the integrity of databases, regardless of size. The SQL language is widely used today across web frameworks and database applications. Knowing SQL gives you the freedom to explore your data, and the power to make better decisions. By learning SQL, you will also learn concepts that apply to nearly every data storage system. The statements covered in this course use SQLite Relational Database Management System (RDBMS). Types of Databases \u00b6 Relational DB (sql, postgres, cql etc) Key-Value What is a Relational Database \u00b6 A relational database is a database that organizes information into one or more tables. A table is a collection of data organized into rows and columns. Tables are sometimes referred to as relations Data Types \u00b6 All data stored in a relational database is of a certain data type. Some of the most common data types are: INTEGER, a positive or negative whole number TEXT, a text string DATE, the date formatted as YYYY-MM-DD REAL, a decimal value","title":"Introduction"},{"location":"databases/sql/introduction/#introduction","text":"SQL, Structured Query Language, is a programming language designed to manage data stored in relational databases. SQL operates through simple, declarative statements. This keeps data accurate and secure, and helps maintain the integrity of databases, regardless of size. The SQL language is widely used today across web frameworks and database applications. Knowing SQL gives you the freedom to explore your data, and the power to make better decisions. By learning SQL, you will also learn concepts that apply to nearly every data storage system. The statements covered in this course use SQLite Relational Database Management System (RDBMS).","title":"Introduction"},{"location":"databases/sql/introduction/#types-of-databases","text":"Relational DB (sql, postgres, cql etc) Key-Value","title":"Types of Databases"},{"location":"databases/sql/introduction/#what-is-a-relational-database","text":"A relational database is a database that organizes information into one or more tables. A table is a collection of data organized into rows and columns. Tables are sometimes referred to as relations","title":"What is a Relational Database"},{"location":"databases/sql/introduction/#data-types","text":"All data stored in a relational database is of a certain data type. Some of the most common data types are: INTEGER, a positive or negative whole number TEXT, a text string DATE, the date formatted as YYYY-MM-DD REAL, a decimal value","title":"Data Types"},{"location":"databases/sql/sql_statements/","text":"SQL statements syntax \u00b6 List of sql commands: https://www.codecademy.com/articles/sql-commands 1. CREATE \u00b6 A statement is text that the database recognizes as a valid command. Statements always end in a semicolon ; . CREATE TABLE table_name ( column_1 data_type, column_2 data_type, column_3 data_type ); Let\u2019s break down the components of a statement: CREATE TABLE is a clause. Clauses perform specific tasks in SQL. By convention, clauses are written in capital letters. Clauses can also be referred to as commands. table_name refers to the name of the table that the command is applied to. ( column_1 data_type , column_2 data_type , column_3 data_type ) is a parameter. A parameter is a list of columns, data types, or values that are passed to a clause as an argument. Here, the parameter is a list of column names and the associated data type. The structure of SQL statements vary. The number of lines used does not matter. A statement can be written all on one line, or split up across multiple lines if it makes it easier to read. example: CREATE TABLE students ( id INTEGER, name TEXT, age INTEGER ); 2. INSERT \u00b6 The INSERT statement inserts a new row into a table. You can use the INSERT statement when you want to add new records. example: 1. Insert single row in the created table INSERT INTO students (id, name, age) VALUES (1, 'Jon Doe', 22); 2. Insert multiple vaules in the created table INSERT INTO table (id, name, age) VALUES (2, 'Micheal Scott', 50), (3, 'Dwight Schrute', 40), (4, 'Sheldon Cooper', 35); 3. SELECT \u00b6 SELECT statements are used to fetch specific or all data from a database. examples: 1. SELECT returns all data in the name column of the students table. SELECT name FROM students; 2. SELECT returns all data from all the columns of the students table. SELECT * FROM students; * is a special wildcard character allows you to select every column in a table without having to name each one individually. 4. ALTER \u00b6 The ALTER TABLE statement adds a new column to a table. You can use this command when you want to add columns to a table. examples: 1. The statement below adds a new column student_major to the students table. ALTER TABLE students ADD COLUMN student_major TEXT; NULL is a special value in SQL that represents missing or unknown data. Here, the rows that existed before the column was added have NULL values for student_major . Warning you cannot specify what position to add a column to a table. By default, a new column will always be added at the end of the table. If column order is very important, then an alternative is to create a new table and add the columns in the specific order they should appear. 5. UPDATE \u00b6 The UPDATE statement edits a row in a table. You can use the UPDATE statement when you want to change existing records. WHERE is a clause that indicates which row(s) to update with the new column value. examples: UPDATE students SET student_major = 'Physics' WHERE id = 4; Faq Question: How is ALTER different from UPDATE? Answer: Although similar in the sense that both statements will modify a table, these statements are quite different. The ALTER statement is used to modify columns. With ALTER , you can add columns, remove them, or even modify them. The UPDATE statement is used to modify rows. However, UPDATE can only update a row, and cannot remove or add rows 6. DELETE \u00b6 The DELETE FROM statement deletes one or more rows from a table. You can use the statement when you want to delete existing records. examples: 1. delete all records in the students table with no student_major : DELETE FROM students WHERE student_major IS NULL; WHERE is a clause that lets you select which rows you want to delete. Here we want to delete all of the rows where the student_major column IS NULL . IS NULL is a condition in SQL that returns true when the value is NULL and false otherwise. 2. delete a specific number of rows, Deleting rows 1 and 3 with student_major is null. DELETE FROM celebs WHERE id in (1,3) and student_major IS NULL; 7. CONSTRAINTS \u00b6 CONSTRAINTS that add information about how a column can be used are invoked after specifying the data type for a column. They can be used to tell the database to reject inserted data that does not adhere to a certain restriction. The statement below sets constraints on the celebs table. example: CREATE TABLE awards ( id INTEGER PRIMARY KEY, recipient TEXT NOT NULL, award_name TEXT DEFAULT 'Grammy' ); Faq Question: What are some reasons to apply constraints to a table? Answer: Applying constraints to a table can be useful, and provide some important benefits such as reliability and consistency of your data. The following are a few reasons you might consider for applying constraints to a table. One reason for adding constraints is to prevent invalid data in the table. This is very important, because invalid data can cause issues and unexpected results from calculations. We do not have to worry about new data being added that might otherwise violate our constraints and cause bigger issues. Similar to the previous point, constraints can let us prevent missing data, which is usually filled as NULL within the table. Instead of having missing values set to NULL, we can set constraints so that the missing values are given some default value instead, like 0. This can make some calculations easier to do. Another important reason to add a constraint is for uniqueness, usually in the form of values like the id, or identifier column. By using a constraint like the PRIMARY KEY, we can ensure that every row has their own unique id value.","title":"Sql statements"},{"location":"databases/sql/sql_statements/#sql-statements-syntax","text":"List of sql commands: https://www.codecademy.com/articles/sql-commands","title":"SQL statements syntax"},{"location":"databases/sql/sql_statements/#1-create","text":"A statement is text that the database recognizes as a valid command. Statements always end in a semicolon ; . CREATE TABLE table_name ( column_1 data_type, column_2 data_type, column_3 data_type ); Let\u2019s break down the components of a statement: CREATE TABLE is a clause. Clauses perform specific tasks in SQL. By convention, clauses are written in capital letters. Clauses can also be referred to as commands. table_name refers to the name of the table that the command is applied to. ( column_1 data_type , column_2 data_type , column_3 data_type ) is a parameter. A parameter is a list of columns, data types, or values that are passed to a clause as an argument. Here, the parameter is a list of column names and the associated data type. The structure of SQL statements vary. The number of lines used does not matter. A statement can be written all on one line, or split up across multiple lines if it makes it easier to read. example: CREATE TABLE students ( id INTEGER, name TEXT, age INTEGER );","title":"1. CREATE"},{"location":"databases/sql/sql_statements/#2-insert","text":"The INSERT statement inserts a new row into a table. You can use the INSERT statement when you want to add new records. example: 1. Insert single row in the created table INSERT INTO students (id, name, age) VALUES (1, 'Jon Doe', 22); 2. Insert multiple vaules in the created table INSERT INTO table (id, name, age) VALUES (2, 'Micheal Scott', 50), (3, 'Dwight Schrute', 40), (4, 'Sheldon Cooper', 35);","title":"2. INSERT"},{"location":"databases/sql/sql_statements/#3-select","text":"SELECT statements are used to fetch specific or all data from a database. examples: 1. SELECT returns all data in the name column of the students table. SELECT name FROM students; 2. SELECT returns all data from all the columns of the students table. SELECT * FROM students; * is a special wildcard character allows you to select every column in a table without having to name each one individually.","title":"3. SELECT"},{"location":"databases/sql/sql_statements/#4-alter","text":"The ALTER TABLE statement adds a new column to a table. You can use this command when you want to add columns to a table. examples: 1. The statement below adds a new column student_major to the students table. ALTER TABLE students ADD COLUMN student_major TEXT; NULL is a special value in SQL that represents missing or unknown data. Here, the rows that existed before the column was added have NULL values for student_major . Warning you cannot specify what position to add a column to a table. By default, a new column will always be added at the end of the table. If column order is very important, then an alternative is to create a new table and add the columns in the specific order they should appear.","title":"4. ALTER"},{"location":"databases/sql/sql_statements/#5-update","text":"The UPDATE statement edits a row in a table. You can use the UPDATE statement when you want to change existing records. WHERE is a clause that indicates which row(s) to update with the new column value. examples: UPDATE students SET student_major = 'Physics' WHERE id = 4; Faq Question: How is ALTER different from UPDATE? Answer: Although similar in the sense that both statements will modify a table, these statements are quite different. The ALTER statement is used to modify columns. With ALTER , you can add columns, remove them, or even modify them. The UPDATE statement is used to modify rows. However, UPDATE can only update a row, and cannot remove or add rows","title":"5. UPDATE"},{"location":"databases/sql/sql_statements/#6-delete","text":"The DELETE FROM statement deletes one or more rows from a table. You can use the statement when you want to delete existing records. examples: 1. delete all records in the students table with no student_major : DELETE FROM students WHERE student_major IS NULL; WHERE is a clause that lets you select which rows you want to delete. Here we want to delete all of the rows where the student_major column IS NULL . IS NULL is a condition in SQL that returns true when the value is NULL and false otherwise. 2. delete a specific number of rows, Deleting rows 1 and 3 with student_major is null. DELETE FROM celebs WHERE id in (1,3) and student_major IS NULL;","title":"6. DELETE"},{"location":"databases/sql/sql_statements/#7-constraints","text":"CONSTRAINTS that add information about how a column can be used are invoked after specifying the data type for a column. They can be used to tell the database to reject inserted data that does not adhere to a certain restriction. The statement below sets constraints on the celebs table. example: CREATE TABLE awards ( id INTEGER PRIMARY KEY, recipient TEXT NOT NULL, award_name TEXT DEFAULT 'Grammy' ); Faq Question: What are some reasons to apply constraints to a table? Answer: Applying constraints to a table can be useful, and provide some important benefits such as reliability and consistency of your data. The following are a few reasons you might consider for applying constraints to a table. One reason for adding constraints is to prevent invalid data in the table. This is very important, because invalid data can cause issues and unexpected results from calculations. We do not have to worry about new data being added that might otherwise violate our constraints and cause bigger issues. Similar to the previous point, constraints can let us prevent missing data, which is usually filled as NULL within the table. Instead of having missing values set to NULL, we can set constraints so that the missing values are given some default value instead, like 0. This can make some calculations easier to do. Another important reason to add a constraint is for uniqueness, usually in the form of values like the id, or identifier column. By using a constraint like the PRIMARY KEY, we can ensure that every row has their own unique id value.","title":"7. CONSTRAINTS"},{"location":"docker/install_run_docker/","text":"Commands to run on the VM Instance \u00b6 Install Docker $ sudo apt-get install docker.io Pull nginx image $ sudo docker pull nginx:1.10.0 Check Docker images $ sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE nginx 1.10.0 16666ff3a57f 3 years ago 183MB Run the first instance $ sudo docker run -d nginx:1.10.0 check that it's up and running $ sudo docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 370f8462ba56 nginx:1.10.0 \"nginx -g 'daemon of\u2026\" 5 seconds ago Up 4 seconds 80/tcp, 443/tcp thirsty_hugle Run a different version of nginx (if it's not available on your machine locally then docker will automatically pull it and then create a docker instance) sudo docker run -d nginx:1.9.3 Check how many instances are running $ sudo docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 3d3d3bcf8b5d nginx:1.9.3 \"nginx -g 'daemon of\u2026\" 20 seconds ago Up 19 seconds 80/tcp, 443/tcp infallible_goodall 370f8462ba56 nginx:1.10.0 \"nginx -g 'daemon of\u2026\" 42 seconds ago Up 41 seconds 80/tcp, 443/tcp thirsty_hugle $ sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE nginx 1.10.0 16666ff3a57f 3 years ago 183MB nginx 1.9.3 ea4b88a656c9 4 years ago 133MB What's with the container names? If you don't specify a name, Docker gives a container a random name, such as \"stoic_williams,\" \"sharp_bartik\" etc These are generated from a list of adjectives and names of famous scientists and hackers. https://github.com/moby/moby/blob/master/pkg/namesgenerator/names-generator.go","title":"Install run docker"},{"location":"docker/install_run_docker/#commands-to-run-on-the-vm-instance","text":"Install Docker $ sudo apt-get install docker.io Pull nginx image $ sudo docker pull nginx:1.10.0 Check Docker images $ sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE nginx 1.10.0 16666ff3a57f 3 years ago 183MB Run the first instance $ sudo docker run -d nginx:1.10.0 check that it's up and running $ sudo docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 370f8462ba56 nginx:1.10.0 \"nginx -g 'daemon of\u2026\" 5 seconds ago Up 4 seconds 80/tcp, 443/tcp thirsty_hugle Run a different version of nginx (if it's not available on your machine locally then docker will automatically pull it and then create a docker instance) sudo docker run -d nginx:1.9.3 Check how many instances are running $ sudo docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 3d3d3bcf8b5d nginx:1.9.3 \"nginx -g 'daemon of\u2026\" 20 seconds ago Up 19 seconds 80/tcp, 443/tcp infallible_goodall 370f8462ba56 nginx:1.10.0 \"nginx -g 'daemon of\u2026\" 42 seconds ago Up 41 seconds 80/tcp, 443/tcp thirsty_hugle $ sudo docker images REPOSITORY TAG IMAGE ID CREATED SIZE nginx 1.10.0 16666ff3a57f 3 years ago 183MB nginx 1.9.3 ea4b88a656c9 4 years ago 133MB What's with the container names? If you don't specify a name, Docker gives a container a random name, such as \"stoic_williams,\" \"sharp_bartik\" etc These are generated from a list of adjectives and names of famous scientists and hackers. https://github.com/moby/moby/blob/master/pkg/namesgenerator/names-generator.go","title":"Commands to run on the VM Instance"},{"location":"github/linking_remote_n_local_repos/","text":"Linking your local fork to a upstream repo \u00b6 Fork the repo which you want to work on by pressing fork button on github.com Git clone your fork $ git clone git@github.com:username/upstream-repo-name.git change to go in the repository $ cd upstream-repo-name Now we link our local repo to the central (upstream repo) in order to pull changes from there $ git remote add upstream git@github.com:upstream-repo-name/upstream-repo-name.git Now, verify if the remote is indeed been added $ git remote -v","title":"Linking remote n local repos"},{"location":"github/linking_remote_n_local_repos/#linking-your-local-fork-to-a-upstream-repo","text":"Fork the repo which you want to work on by pressing fork button on github.com Git clone your fork $ git clone git@github.com:username/upstream-repo-name.git change to go in the repository $ cd upstream-repo-name Now we link our local repo to the central (upstream repo) in order to pull changes from there $ git remote add upstream git@github.com:upstream-repo-name/upstream-repo-name.git Now, verify if the remote is indeed been added $ git remote -v","title":"Linking your local fork to a upstream repo"},{"location":"github/rebase_a_branch/","text":"Git Rebase \u00b6 Merge conflict is a very common problem developers run into in situations where multiple developers are working on a same piece of code/file and contribute one after the other. Usually the second person has to rebase to accomodate the changes being merged by the first person. A git rebase needs to be done during such situations. Checkout the master branch(assuming that the default upstream branch where code gets merged is master) $ git checkout master Pull changes from upstream and origin repo: $ git remote update Rebase your local master with that of upstream $ git rebase upstream/master (you should be able to see similar output when the rebase command is executed) First, rewinding head to replay your work on top of it... Fast-forwarded develop to upstream/master. Push the changes to your origin $ git push Check the commit of the head of the master branch $ git log (check the latest commit hash for upstream repo, you should be committing your code changes after his commit ) Checkout the branch you are working on already $ git checkout <branch-name> Rebase your current branch with your updated local(origin) copy $ git rebase origin/master Compare that your local(origin) repo's commit hash is same as the upstream repo's hash. $ git log You will find the merge conflicts at this stage, if there are no merge conflicts which means you are good. If there are merge conflicts in your files then resolve the merge conflicts and continue the rebase $ git rebase --continue Finally, again confirm the commits on your branch, your own branch commit should come after the rebased commit which was pulled from upstream. $ git log","title":"Rebase a branch"},{"location":"github/rebase_a_branch/#git-rebase","text":"Merge conflict is a very common problem developers run into in situations where multiple developers are working on a same piece of code/file and contribute one after the other. Usually the second person has to rebase to accomodate the changes being merged by the first person. A git rebase needs to be done during such situations. Checkout the master branch(assuming that the default upstream branch where code gets merged is master) $ git checkout master Pull changes from upstream and origin repo: $ git remote update Rebase your local master with that of upstream $ git rebase upstream/master (you should be able to see similar output when the rebase command is executed) First, rewinding head to replay your work on top of it... Fast-forwarded develop to upstream/master. Push the changes to your origin $ git push Check the commit of the head of the master branch $ git log (check the latest commit hash for upstream repo, you should be committing your code changes after his commit ) Checkout the branch you are working on already $ git checkout <branch-name> Rebase your current branch with your updated local(origin) copy $ git rebase origin/master Compare that your local(origin) repo's commit hash is same as the upstream repo's hash. $ git log You will find the merge conflicts at this stage, if there are no merge conflicts which means you are good. If there are merge conflicts in your files then resolve the merge conflicts and continue the rebase $ git rebase --continue Finally, again confirm the commits on your branch, your own branch commit should come after the rebased commit which was pulled from upstream. $ git log","title":"Git Rebase"},{"location":"github/updating_code_on_branch/","text":"Creating your own branch for a new feature/bugfix \u00b6 $ git remote -v (To check if you have a local fork and a upstream set up) $ git checkout -b <branch-name> (this creates a new branch) $ git branch (To make sure you are working on the desired branch) $ git add <file_name> (stage all your files) $ git commit -s (or -m) $ git push --set-upstream origin <branch_name> updating your PR \u00b6 $ git branch (To make sure you are working on the desired branch) $ git checkout <branch-name> $ git add <file_name> $ git commit --amend Add your commit message with whatever changes you have made and save it and push it to your branch \u00b6 $ git push origin <branch-name> --force","title":"Updating code on branch"},{"location":"github/updating_code_on_branch/#creating-your-own-branch-for-a-new-featurebugfix","text":"$ git remote -v (To check if you have a local fork and a upstream set up) $ git checkout -b <branch-name> (this creates a new branch) $ git branch (To make sure you are working on the desired branch) $ git add <file_name> (stage all your files) $ git commit -s (or -m) $ git push --set-upstream origin <branch_name>","title":"Creating your own branch for a new feature/bugfix"},{"location":"github/updating_code_on_branch/#updating-your-pr","text":"$ git branch (To make sure you are working on the desired branch) $ git checkout <branch-name> $ git add <file_name> $ git commit --amend","title":"updating your PR"},{"location":"github/updating_code_on_branch/#add-your-commit-message-with-whatever-changes-you-have-made-and-save-it-and-push-it-to-your-branch","text":"$ git push origin <branch-name> --force","title":"Add your commit message with whatever changes you have made and save it and push it to your branch"},{"location":"home/contributing/","text":"Installation \u00b6 To build and preview this site, you must have the following packages installed: mkdocs/mkdocs : the site generator squidfunk/mkdocs-material : the Material theme for MkDocs facelessuser/pymdown-extensions : a Python Markdown extension bundle If you don't want to install the packages locally, use the official Docker image , which includes everything you need to preview, build, and deploy the documentation site. docker pull squidfunk/mkdocs-material For more installation options, see http://squidfunk.github.io/mkdocs-material/ Previewing docs \u00b6 Fork and clone this repository. Start the live development server from the project root. make serve Add new files and save your changes. Navigate to http://localhost:8000/ to review your updates. Publishing docs \u00b6 Push your changes to the upstream master branch. Build the static site files. make build Deploy the documentation site to GitHub Pages. make publish","title":"Contributing"},{"location":"home/contributing/#installation","text":"To build and preview this site, you must have the following packages installed: mkdocs/mkdocs : the site generator squidfunk/mkdocs-material : the Material theme for MkDocs facelessuser/pymdown-extensions : a Python Markdown extension bundle If you don't want to install the packages locally, use the official Docker image , which includes everything you need to preview, build, and deploy the documentation site. docker pull squidfunk/mkdocs-material For more installation options, see http://squidfunk.github.io/mkdocs-material/","title":"Installation"},{"location":"home/contributing/#previewing-docs","text":"Fork and clone this repository. Start the live development server from the project root. make serve Add new files and save your changes. Navigate to http://localhost:8000/ to review your updates.","title":"Previewing docs"},{"location":"home/contributing/#publishing-docs","text":"Push your changes to the upstream master branch. Build the static site files. make build Deploy the documentation site to GitHub Pages. make publish","title":"Publishing docs"},{"location":"home/interesting_tech_reads/","text":"How to write a command line in python: https://www.sicara.ai/blog/2018-12-18-perfect-command-line-interfaces-python \u00b6 Jenkins CI/CD tutorial: https://medium.com/edureka/jenkins-tutorial-68110a2b4bb3 \u00b6 Monitoring with prometheus and grafana in k8s: https://medium.com/faun/monitoring-with-prometheus-and-grafana-in-kubernetes-42727866562c \u00b6","title":"Interesting tech reads"},{"location":"home/interesting_tech_reads/#how-to-write-a-command-line-in-python-httpswwwsicaraaiblog2018-12-18-perfect-command-line-interfaces-python","text":"","title":"How to write a command line in python: https://www.sicara.ai/blog/2018-12-18-perfect-command-line-interfaces-python"},{"location":"home/interesting_tech_reads/#jenkins-cicd-tutorial-httpsmediumcomedurekajenkins-tutorial-68110a2b4bb3","text":"","title":"Jenkins CI/CD tutorial: https://medium.com/edureka/jenkins-tutorial-68110a2b4bb3"},{"location":"home/interesting_tech_reads/#monitoring-with-prometheus-and-grafana-in-k8s-httpsmediumcomfaunmonitoring-with-prometheus-and-grafana-in-kubernetes-42727866562c","text":"","title":"Monitoring with prometheus and grafana in k8s: https://medium.com/faun/monitoring-with-prometheus-and-grafana-in-kubernetes-42727866562c"},{"location":"home/useful_tech_topics_links/","text":"List of useful tech topics \u00b6 Infrastructure setup related \u00b6 HAProxy Basics and Load Balancing Concepts: https://www.digitalocean.com/community/tutorials/an-introduction-to-haproxy-and-load-balancing-concepts Networking related \u00b6 Basics of Network technologies: https://www.digitalocean.com/community/tutorials/an-introduction-to-networking-terminology-interfaces-and-protocols#protocols https://medium.com/@cse247/basics-of-computer-networking-6c7b961f4e14 DNS Basics: https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts Networking protocol basics: https://developer.ibm.com/tutorials/l-lpic1-109-1/ HTTPs protocol related \u00b6 How the web works: https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works https://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-2--net-31155 HTTP basics: https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview Web Caching basics: https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching HTTP Cookies: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies Troubleshoot HTTPS error codes: https://www.digitalocean.com/community/tutorials/how-to-troubleshoot-common-http-error-codes Linux Related \u00b6 Linux kernel expained in a fun way: https://www.cyberciti.biz/link/linux-kernel-explained-how-does-the-kernel-work/ Microservices Related \u00b6 The Twelve-Factor App: https://12factor.net","title":"Useful tech topics links"},{"location":"home/useful_tech_topics_links/#list-of-useful-tech-topics","text":"","title":"List of useful tech topics"},{"location":"home/useful_tech_topics_links/#infrastructure-setup-related","text":"HAProxy Basics and Load Balancing Concepts: https://www.digitalocean.com/community/tutorials/an-introduction-to-haproxy-and-load-balancing-concepts","title":"Infrastructure setup related"},{"location":"home/useful_tech_topics_links/#networking-related","text":"Basics of Network technologies: https://www.digitalocean.com/community/tutorials/an-introduction-to-networking-terminology-interfaces-and-protocols#protocols https://medium.com/@cse247/basics-of-computer-networking-6c7b961f4e14 DNS Basics: https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts Networking protocol basics: https://developer.ibm.com/tutorials/l-lpic1-109-1/","title":"Networking related"},{"location":"home/useful_tech_topics_links/#https-protocol-related","text":"How the web works: https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works https://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-2--net-31155 HTTP basics: https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview Web Caching basics: https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching HTTP Cookies: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies Troubleshoot HTTPS error codes: https://www.digitalocean.com/community/tutorials/how-to-troubleshoot-common-http-error-codes","title":"HTTPs protocol related"},{"location":"home/useful_tech_topics_links/#linux-related","text":"Linux kernel expained in a fun way: https://www.cyberciti.biz/link/linux-kernel-explained-how-does-the-kernel-work/","title":"Linux Related"},{"location":"home/useful_tech_topics_links/#microservices-related","text":"The Twelve-Factor App: https://12factor.net","title":"Microservices Related"},{"location":"http/protocol_basics/","text":"HTTP Basics \u00b6 HTTP is an application layer protocol over TCP which is a transport layer protocol, which in turn is over IP. A connection must be established between the client and server before they can communicate with each other, and HTTP uses the reliable TCP transport protocol to make this connection. By default, web traffic uses TCP port 80. A TCP stream is broken into IP packets, and it ensures that those packets always arrive in the correct order without fail. Client-side Connection Handling \u00b6 On a client, an HTTP application is identified by a tuple. Establishing a connection between two endpoints is a multi-step process and involves the following: resolve IP address from host name via DNS establish a TCP connection with the server using 3-way handshake send an HTTP request wait for a response close connection Server-side Connection Handling \u00b6 The server mostly listens for incoming connections and processes them when it receives a request. The operations involve: establishing a socket to start listening on port 80 (or some other port) receiving the request and parsing the message processing the response setting response headers sending the response to the client close the connection if a Connection: close request header was found","title":"Protocol basics"},{"location":"http/protocol_basics/#http-basics","text":"HTTP is an application layer protocol over TCP which is a transport layer protocol, which in turn is over IP. A connection must be established between the client and server before they can communicate with each other, and HTTP uses the reliable TCP transport protocol to make this connection. By default, web traffic uses TCP port 80. A TCP stream is broken into IP packets, and it ensures that those packets always arrive in the correct order without fail.","title":"HTTP Basics"},{"location":"http/protocol_basics/#client-side-connection-handling","text":"On a client, an HTTP application is identified by a tuple. Establishing a connection between two endpoints is a multi-step process and involves the following: resolve IP address from host name via DNS establish a TCP connection with the server using 3-way handshake send an HTTP request wait for a response close connection","title":"Client-side Connection Handling"},{"location":"http/protocol_basics/#server-side-connection-handling","text":"The server mostly listens for incoming connections and processes them when it receives a request. The operations involve: establishing a socket to start listening on port 80 (or some other port) receiving the request and parsing the message processing the response setting response headers sending the response to the client close the connection if a Connection: close request header was found","title":"Server-side Connection Handling"},{"location":"http/webcaching_basics/","text":"What Is Caching? \u00b6 Caching, or temporarily storing content from previous requests, is part of the core content delivery strategy implemented within the HTTP protocol. Components throughout the delivery path can all cache items to speed up subsequent requests, subject to the caching policies declared for the content. There are many different types of caching available, each of which has its own characteristics. Application caches and memory caches are both popular for their ability to speed up certain responses. Web Caching \u00b6 Web caching is a core design feature of the HTTP protocol meant to minimize network traffic while improving the perceived responsiveness of the system as a whole. Web caching works by caching the HTTP responses for requests according to certain rules. Subsequent requests for cached content can then be fulfilled from a cache closer to the user instead of sending the request all the way back to the web server.","title":"Webcaching basics"},{"location":"http/webcaching_basics/#what-is-caching","text":"Caching, or temporarily storing content from previous requests, is part of the core content delivery strategy implemented within the HTTP protocol. Components throughout the delivery path can all cache items to speed up subsequent requests, subject to the caching policies declared for the content. There are many different types of caching available, each of which has its own characteristics. Application caches and memory caches are both popular for their ability to speed up certain responses.","title":"What Is Caching?"},{"location":"http/webcaching_basics/#web-caching","text":"Web caching is a core design feature of the HTTP protocol meant to minimize network traffic while improving the perceived responsiveness of the system as a whole. Web caching works by caching the HTTP responses for requests according to certain rules. Subsequent requests for cached content can then be fulfilled from a cache closer to the user instead of sending the request all the way back to the web server.","title":"Web Caching"},{"location":"networking/DNS/","text":"What is a Domain Name System? \u00b6 According to this article , The domain name system, more commonly known as \u201cDNS\u201d is the networking system in place that allows us to resolve human-friendly names to unique addresses. In short, DNS tranlates a hostname into an IP address for that host. A-Record: \u00b6 It is used to find the address of a computer connected to the internet from a name (domain name). In other words, The \"A\u201d record is used to map a host to an IPv4 IP address Domain Name ---> Registrar ---> IP Address If DNS goes down your site can't be reached by users. DNS records expires DNS is part of the security mechanism for HTTP which includes SSL encryption and cookie privacy DNS record have a TTL (Time to Live) which tells the caches on how long to cache them for The Resolver: \u00b6 The DNS client code is built into every OS. C-Name or FQDN: \u00b6 It is used to specify that a domain name is an alias for another domain. example www.github.com is an c-name or alias for github.com Search Domain: \u00b6 A setting in the resolver configuration that makes the resolver look up names inside a domain example of DNS worker in action: A record for www.google.com can be found on the name server for www.google.com . NS record for www.google.com resides in the com server which is a `gTLD (Global Top level Domain) The NS for .com are stored in the root servers","title":"DNS"},{"location":"networking/DNS/#what-is-a-domain-name-system","text":"According to this article , The domain name system, more commonly known as \u201cDNS\u201d is the networking system in place that allows us to resolve human-friendly names to unique addresses. In short, DNS tranlates a hostname into an IP address for that host.","title":"What is a Domain Name System?"},{"location":"networking/DNS/#a-record","text":"It is used to find the address of a computer connected to the internet from a name (domain name). In other words, The \"A\u201d record is used to map a host to an IPv4 IP address Domain Name ---> Registrar ---> IP Address If DNS goes down your site can't be reached by users. DNS records expires DNS is part of the security mechanism for HTTP which includes SSL encryption and cookie privacy DNS record have a TTL (Time to Live) which tells the caches on how long to cache them for","title":"A-Record:"},{"location":"networking/DNS/#the-resolver","text":"The DNS client code is built into every OS.","title":"The Resolver:"},{"location":"networking/DNS/#c-name-or-fqdn","text":"It is used to specify that a domain name is an alias for another domain. example www.github.com is an c-name or alias for github.com","title":"C-Name or FQDN:"},{"location":"networking/DNS/#search-domain","text":"A setting in the resolver configuration that makes the resolver look up names inside a domain example of DNS worker in action: A record for www.google.com can be found on the name server for www.google.com . NS record for www.google.com resides in the com server which is a `gTLD (Global Top level Domain) The NS for .com are stored in the root servers","title":"Search Domain:"},{"location":"networking/basic_concepts/","text":"All traffic on the internet is split-up into messages called packets packet is a short message sent from one computer to another. ping is simpler than HTTP, but HTTP is not based on ping In everyday softwares the HTTP layers is implemented by programs such as browsers and servers Lower layers such as TCP is implemented in the Operating System. nc command is a thin wrapper over TCP Layer Protols Concepts Application HTTP, SSH URLs, password Transport TCP, UDP port numbers, sessions Internet IP IP Address, routes Hardware wifi, ethernet, DSL signal strength, access points Each Top layer depends on the layer below it, however each layer functions independently and do not need worry about the layers below it ports distinguishes different applications/programs running on the same server. nc command is used to listen on to that port. The port range that a normal (non-root) user can listen on is 1024 through 65535. But if you use root access (including sudo) then you can listen on ports down to 1.","title":"Basic concepts"},{"location":"networking/commands_cheatsheet/","text":"List of some useful Networking commands \u00b6 1. IP Addr \u00b6 To get the depth information of your network interfaces like IP Address, MAC Address information, use the following command as shown below. https://www.tecmint.com/ip-command-examples/ ip addr show ip route show 2. netcat \u00b6 netcat or nc is a handy command to verify the connectivity to an ip or website from a client terminal $ nc -zv www.google.com 443 Connection to www.google.com 443 port [tcp/https] succeeded! all nc does not know anything about forming a HTTP request. All netcat (nc) does is connect to a server's port and send a string over it. To the server the request appears like a HTTP request and it sends a HTTP response. lsof is a utility that open files, including network sockets (listening or connected). Use sudo lsof -i to listen only network sockets 3. Dig (domain information groper): \u00b6 dig is a flexible tool for interrogating DNS name servers. It performs DNS lookups and displays the answers that are returned from the name server(s) that were queried. Most DNS administrators use dig to troubleshoot DNS problems because of its flexibility, ease of use and clarity of output. Other lookup tools tend to have less functionality than dig. 4. tcpdump: \u00b6 tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp printed, by default, as hours, minutes, seconds, and fractions of a second since midnight. example: to check network traffic from your host to some remote host. In terminal one session type the below command: sudo tcpdump -n host 8.8.8.8 In a second terminal session, run a ping to some network packet flowing in the first terminal one session: ping -c 3 8.8.8.8 5. traceroute: \u00b6 traceroute tracks the route packets taken from an IP network on their way to a given host. It utilizes the IP protocol's time to live (TTL) field and attempts to elicit an ICMP TIME_EXCEEDED response from each gateway along the path to the host. example: traceroute www.google.com 6. mtr: \u00b6 mtr combines the functionality of the traceroute and ping programs in a single network diagnostic tool. As mtr starts, it investigates the network connection between the host mtr runs on and HOSTNAME by sending packets with purposely low TTLs. It continues to send packets with low TTL, noting the response time of the intervening routers. This allows mtr to print the response percentage and response times of the internet route to HOSTNAME. A sudden increase in packet loss or response time is often an indication of a bad (or simply overloaded) link. The results are usually reported as round-trip-response times in miliseconds and the percentage of packetloss.","title":"Commands cheatsheet"},{"location":"networking/commands_cheatsheet/#list-of-some-useful-networking-commands","text":"","title":"List of some useful Networking commands"},{"location":"networking/commands_cheatsheet/#1-ip-addr","text":"To get the depth information of your network interfaces like IP Address, MAC Address information, use the following command as shown below. https://www.tecmint.com/ip-command-examples/ ip addr show ip route show","title":"1. IP Addr"},{"location":"networking/commands_cheatsheet/#2-netcat","text":"netcat or nc is a handy command to verify the connectivity to an ip or website from a client terminal $ nc -zv www.google.com 443 Connection to www.google.com 443 port [tcp/https] succeeded! all nc does not know anything about forming a HTTP request. All netcat (nc) does is connect to a server's port and send a string over it. To the server the request appears like a HTTP request and it sends a HTTP response. lsof is a utility that open files, including network sockets (listening or connected). Use sudo lsof -i to listen only network sockets","title":"2. netcat"},{"location":"networking/commands_cheatsheet/#3-dig-domain-information-groper","text":"dig is a flexible tool for interrogating DNS name servers. It performs DNS lookups and displays the answers that are returned from the name server(s) that were queried. Most DNS administrators use dig to troubleshoot DNS problems because of its flexibility, ease of use and clarity of output. Other lookup tools tend to have less functionality than dig.","title":"3. Dig (domain information groper):"},{"location":"networking/commands_cheatsheet/#4-tcpdump","text":"tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp printed, by default, as hours, minutes, seconds, and fractions of a second since midnight. example: to check network traffic from your host to some remote host. In terminal one session type the below command: sudo tcpdump -n host 8.8.8.8 In a second terminal session, run a ping to some network packet flowing in the first terminal one session: ping -c 3 8.8.8.8","title":"4. tcpdump:"},{"location":"networking/commands_cheatsheet/#5-traceroute","text":"traceroute tracks the route packets taken from an IP network on their way to a given host. It utilizes the IP protocol's time to live (TTL) field and attempts to elicit an ICMP TIME_EXCEEDED response from each gateway along the path to the host. example: traceroute www.google.com","title":"5. traceroute:"},{"location":"networking/commands_cheatsheet/#6-mtr","text":"mtr combines the functionality of the traceroute and ping programs in a single network diagnostic tool. As mtr starts, it investigates the network connection between the host mtr runs on and HOSTNAME by sending packets with purposely low TTLs. It continues to send packets with low TTL, noting the response time of the intervening routers. This allows mtr to print the response percentage and response times of the internet route to HOSTNAME. A sudden increase in packet loss or response time is often an indication of a bad (or simply overloaded) link. The results are usually reported as round-trip-response times in miliseconds and the percentage of packetloss.","title":"6. mtr:"},{"location":"pip/what_is_pip/","text":"What is PIP \u00b6 python package management tool which allows us to install, uninstall and manage third party Python source code and all its utility packages. python 3.4 & later have pip included by default Commonly used commands \u00b6 To list available packages python -m pip list To install a package python -m pip install --user <package_name> To upgrade a package python -m pip install --upgrade <package_name> To uninstall a package python -m pip uninstall <package_name>","title":"What is pip"},{"location":"pip/what_is_pip/#what-is-pip","text":"python package management tool which allows us to install, uninstall and manage third party Python source code and all its utility packages. python 3.4 & later have pip included by default","title":"What is PIP"},{"location":"pip/what_is_pip/#commonly-used-commands","text":"To list available packages python -m pip list To install a package python -m pip install --user <package_name> To upgrade a package python -m pip install --upgrade <package_name> To uninstall a package python -m pip uninstall <package_name>","title":"Commonly used commands"}]}